<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 记录-好好工作</title>
    <link>https://blog.wellwell.work/w/post/</link>
    <description>Recent content in Posts on 记录-好好工作</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    
	<atom:link href="https://blog.wellwell.work/w/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google IPs | 国内可用</title>
      <link>https://blog.wellwell.work/w/post/2014-4-20-googleips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2014-4-20-googleips/</guid>
      <description>GFW内可以访问的Google IP.
IP来自于 SAE 上的项目(每2个月更新一次).
 118.194.1.112 173.194.1.13 173.194.1.15 173.194.1.19 118.174.24.123 118.174.27.210  </description>
    </item>
    
    <item>
      <title>SPA Mithril文档</title>
      <link>https://blog.wellwell.work/w/post/2015-12-29-mithril-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2015-12-29-mithril-page/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本项目，是在Typecho的基础上进行的扩展开发，并尽量使用其API来开发功能。由于他提供的钩子并不能完全满足开发需要，所欲有部分是接增加了他的源码，具体下面说明。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一直打算做的</title>
      <link>https://blog.wellwell.work/w/post/2014-4-4-ideas-and-projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2014-4-4-ideas-and-projects/</guid>
      <description>都是平时的 Ideas ,一直想抽个时间完成. 无奈,一直不能认真地去做事, 先暂时把他们做个记录.
 基于百度云网盘的资源共享 基于乐视云的视频播放 微博上的毛笔字图片爬取 微博上发布别人的微博 基于SAE的项目管理系统 喜马拉雅 的命令行客户端 Go, Rust, Swift的项目实现  </description>
    </item>
    
    <item>
      <title>个人简历</title>
      <link>https://blog.wellwell.work/w/post/2016-03-01-%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2016-03-01-%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</guid>
      <description>联系方式  Email: jsz3@live.com WeChat: JohnCx Github: @jiusanzhou Twitter: @jiusanzhou Site: https://wencai.app  就职  部门: i问财 职位: 爬虫开发 入职时间: 2016.03  经历 [2016.03-] 杭州，同花顺  [√] 微信抓取 Web版协议研究 [√] 微信抓取 Android Hook [:timer_clock:] 配置化爬虫  [2015.07-2016.03] 合肥，智能硬件创业  [×] 智能厨房系统 [IoT, 自动烧菜, 厨房社交] &amp;gt; 1. 设计整体思路 &amp;gt; 2. 负责烧菜教学系统的产品原型设计 [√] 高空清洁机器人 [四轴飞行, MAVProxy, ArduPilot, BeagleBoard, OpenCV] &amp;gt; 1. 四轴飞行的机械方案 &amp;gt; 2. 飞控调研 &amp;gt; 3. 飞行器控制台与自助控制逻辑实现 &amp;gt; 4. 基于OpenCV的主体轮廓识别与路径规划 &amp;gt; 5.</description>
    </item>
    
    <item>
      <title>公司管理系统设计0.0.1</title>
      <link>https://blog.wellwell.work/w/post/2014-5-14-company-control-system-design-0.0.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2014-5-14-company-control-system-design-0.0.1/</guid>
      <description> 构建公司的在线（或为局域网）管理系统
主要功能  员工管理 部门管理 考勤 工作记录提交查看 项目管理 采购提交系统 财务  主要权限逻辑关系  管理部门有权限查看所有内容 各部门所属员工不能查看该部门领导的内容 各部门的员工有权限查看其所属部门其他员工的内容 若设有子部门则子部门的权限等他于员工，在该子部门下继续权限分级  主要事务逻辑  管理层能够操作一切事物 所有员工的录用都拟由人事部门确定并提交详细资料到员工管理库 其他部门领导可在员工库内挑选员工 管理层有权添加公司部门，并指定部门领导人 部门领导能够调整其部门内员工的相关数据，如组长，助手，值班情况，以及在管理层给定的标准工资上下进行调动 员工的电脑上安装公司程序（服务），以开机为上班打卡，00:00前最后一次关机为下班，所有数据全部提交到数据库  或发送一次心跳包/10min，携带摄像头前的人脸数据，以防不关关机,电脑开机即为员工在线 人脸比对失败，则弹出Captchat做最终认证  如果以项目为主线，则工作报告交由项目负责人查看。并对工作进行评级 发起项目应该详细指定日程安排，工作安排  具体技术实现  理应使用关系型数据库，PostgreSQL，Mysql等，Mongodb 等NoSQL亦可 主要数据  员工 部门   </description>
    </item>
    
    <item>
      <title>再次換面的Blog</title>
      <link>https://blog.wellwell.work/w/post/2014-6-15-about-front-end-for-the-blog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2014-6-15-about-front-end-for-the-blog/</guid>
      <description> 每次都是想準備大大的改版，但是幾乎沒有一次把它完整的完成下來，這次也不例外。所幸這次是能夠訪問的，暫且這樣。
 按，這個Blog本身是沒什麼技術點，這裏我主要扯一扯整個設計，以便於以後來完善時，有據可依，而不是再次重頭來！
雖然目前的Blog是託管在Github上的靜態頁面，但是我在設計整個“架構”是進行了前後端的分離，所以很具有通用性，也便於以後項目的借鑑和部署。
 整體設計模式 雖然說Github上的Page服務是靜態內容，但是我們可以把她搞得想後臺服務，甚至是REST Api都能夠是看起來像。當然了，指的是GET。
起碼能在請求數據上做到相似。
利用Github渲染出json數據代替通常的html文件，我們的客戶端只需做AJAX請求，這樣能夠完成一個簡單SPA的Blog。
前端微框架 當然這裏不是必須要使用框架的，原生JS也能夠把代碼量控制在很少的情況下完成我們所需要的功能。
我爲了省懶，當然也是在避免重複造輪子，選用了一個比較新的非常小巧的MVC框架mithril。
目前還沒有正式版本，不過有一直在更新。
她有下面幾個特點：
 體積超小，壓縮後只有7Kb，想想Rx，Angular等，這簡直就是小米步槍於飛機大炮。 當然小不代表弱，她只是保留了最底層的功能，什麼雙向綁定之類的，全部手動去做好了。 據作者自己測試說，性能秒Angular好幾十倍，其實這完全是可以的，畢竟這是相當精簡的，去掉了很多使用率不高的代碼。 MVC這個就不多提，現在沒有MVC，MVVM等設計模式都不好意思叫框架。 模板安全 虛擬DOM，所有的DOM都是在在內存中完成所有的操作的。 自動重繪  總結一句話，小而強的MVC框架，特別是在你需要做對流量加載時間性能等有嚴格要求的微型SPA時，強烈推薦使用。
當然如果比較懶，不想動手寫太多的代碼，而且是完成管理類的SPA時，用Angular就無所謂啦。但是，反過來你還是得花很多的時間去學習她的那一套設計模式。換用React又是重頭開始。
所以，我建議小應用選mithril，大的選Angular，Rx。
模擬後臺 這個需要瞭解下jekyll的語法，如果熟悉ruby或者Python理解起來不是很困難。
無非最後就是把數據渲染成我們一般後臺返回的json格式數據，然後交給前端去加載到頁面上。
這裏有個坑JavaScript的JSON.parse()函數對請求下來的數據格式要求挺嚴格的，以前沒接觸過不太清楚，真正做了才知道，不少細節：
 &#39;這個在json數據中是不合法的，全部用&amp;quot;； 與Object對象不同，json中的key一定要有&amp;quot;； 最後一個元素結尾是不能有,。  </description>
    </item>
    
    <item>
      <title>创业公司项目第一发---能上油管的极米</title>
      <link>https://blog.wellwell.work/w/post/2015-07-29-frist-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2015-07-29-frist-project/</guid>
      <description>来到极索科技快有一个月，为了维持生存这边有几位做电商的，在现在还没有确定方向下，我自愿参与了推广工作！
 0. 初衷 私以为，做传统的推广是一条道，车水马龙，川流不息，但是人头攒动，步履维艰；还有种商品的推广是隐式推广（自己瞎命的名），什么意思呢？下面姑且听我细细到来！
所谓的隐式推广，就是不以推广为直接手段的推广动作，在不是直接推广商品（对于我现在来说只是商品）的行为下，来达到促进商品曝光率和流量的增加。
其实这不是什么玄学，牛逼学，成功商业学，这只是一种促销的手段，或者说是一种模式，包括但不限于这种推广和促销，有种声东击西，指桑骂槐，明修栈道暗渡陈仓的意思。举个很常见的例子，汉堡店里面为了提高可乐单品的销售业绩，把原本小杯4元改成5元，这样的提价不但不会使可乐的销售下滑，反而还促进了销售。顾客们都去买5元的中杯觉得划算！好了，这个例子好像不管在什么学上面都能够被提到，什么心理学，消费心理学。咱讨论不了那个，今天咱就从这么个例子中去，抽出一条不是主线的主线！
1. 拟定方案 既然咱们是做软推广，那咱就得提升下自己商品的逼（功）格（能）。我个人目（瞎）测（猜），使用咱家投影仪器的基本上都会是年轻人，当人也不排出有跳广场舞的大妈，咱先就把大妈人群忽略。假设，购买咱们投影仪的70%是年轻人，其实有数据的，但是店铺数据我不能直接去查看，那年轻人对于上Youtube这样的装（违）逼（法）活动，应该都不会很陌生，我再次假设有一 半的人是知道的，那最后就相当于35%的已经购买的顾客是有可能知道Youtube的，而且跃跃欲试。
之前有款名叫魔豆的路由器，他主打的功能就是翻强，而且貌似很是热销。如果我们的投影仪，能够自带梯子，是不是能够提高店铺的转化率。卖梯子服务咱先就不考虑，我们先从主要任务看，拟定的数据是有35%的顾客会有爬梯需求，当然了实际上是没有这么高的，而且还得排出一部分已经有梯子的用户，但是，我们在之前是去掉了将近一般的用户，是假设他们不知道梯子，但是我们完全能够让他们知道有这么个玩意儿。所以，这个数据应该不算特别离谱。
如果在产品的介绍时说明咱的产品自带梯子，同时也说明你能够通过梯子来学（娱）习（乐）。我猜（意）测（淫）这样的话，应该能够提高商品流量的转化率。
2. 方案实施 既然已经确定这样子做了，那咱就这样子干下去，先不管有没有效果，试试才能知道！
2.1 梯子方案 其实这个毋庸置疑，我自己在手机上和电脑上都是用的Showsocks，所以就直接用它了。然后就是选择服务器，和打造客户端。
对于服务器，由于咱没有开口向上要钱，所以就自己从生活费中扣点出来，买不起贵的，先上搬瓦工的试试，等以后真有需求了，再去申请费用开通高级一点的！
客户端的话，其实是有现成的Showsocks for Android，Github上能找到，那就简单了。直接在现成的上面动刀，打造成属于咱自己的，当然了，这样是违反开源精神的。这里我谨以此作为学习之需，不做任何商业目的。我们只卖投影仪，其他概不出售！
2.2 服务端
这个没啥，直接上到搬瓦工买就行了，而且他还专门有现成的选项给你搭建梯子，勾选下就OK了，完全都不用自己去安装。作为专业的屌丝，当然还得把这台服务器去干点其他的。原谅我自己买不起电脑，把学长的破华硕占为己有。笔记本上是Ubuntu，用SHH登陆到后台，那边是CentOS，为啥选他呢，因为他最便宜！给服务器安装le zsh，Nginx等，其实如果我现在搞的话，会直接放弃Nginx，用大Golang开发的Caddy，凡事都要追求新嘛！而且这玩意儿简单粗暴，性能也不会逊于Nginx。
2.3 客户端
这个是费了两天神，项目地址：这里， 他不是Scala写的。当然了，主要不是因为语言问题，由于Sbt编译，Android结构这些都不是很熟悉，所以花了些时间去深入。
咱目的很明确，把这个东西改造成大概是属于我们自己的东西，大概的改动如下：
 应用名称，咱的叫EasyOut，极帆； 背景色，字体； 关于部分改为我们自己的介绍，其实就是一个html； 简化操作，把设置那些东西全部去掉，或者隐藏； 配置数据从我们自己的服务器上获取，不需要手动去设置； 主界面上留一个‘打开/关闭’的大按钮，圆形的。  大概就是这样子的！
详细的手术过程就不讲了，没啥技术，我就记得，我每改一次代码，我的上真机调试，而且还用查看系统log，才能找到问题！泪！！！
2.3 半成品 这里下载
第一个测试版本， 是把配置写在Setting里面的，还没有完成从服务器获取设置文件！而且，说好的Button也还没有，长按Title能够手动去添加设置！
成效 在商品的详情中，描述如果需要梯子就加100块！！！永久的！
结果是有略有成效，最终有3位成交了！But，后期的维护成本太高了，他不断的问，怎么设置（自动配置还没完成），为什么网速慢&amp;hellip;.
总结 方案有效！但是，
不要拿半成品去做商业化！</description>
    </item>
    
    <item>
      <title>商业计划书指南</title>
      <link>https://blog.wellwell.work/w/post/2014-6-6-business-plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2014-6-6-business-plan/</guid>
      <description>纵观一份商业策划书，你得有什么？逻辑。
这个东西投资者不会告诉你的，他告诉你的往往是：不知道你在说什么。
什么是逻辑？就是你的大纲！你的商业策划书的第一印象，你如果第一印象不能抓住投资者，你就失败了一半。
 著作权归作者所有。 商业转载请联系作者获得授权，非商业转载请注明出处。 作者：校尉 链接：http://www.zhihu.com/question/20385000/answer/23949933 来源：知乎
 在回答这个问题之前，首先，我需要提几个严肃的前提： 1. 从你创业开始，你若不能接受批评，还是不要创业了。 2. 一条隐性要求：创业团队成员必须要有逻辑思维能力强的人，如果没有，还是不要创业了。 3. 必须端正你写这份商业策划书的态度，你必须一个字一个字的改。 4. 别扯废话。 5. 写完策划书后，你若不能背下来，还是不要递给投资者看了。
BEAGIN 纵观一份商业策划书，你得有什么？逻辑。
这个东西投资者不会告诉你的，他告诉你的往往是：不知道你在说什么。
什么是逻辑？就是你的大纲！你的商业策划书的第一印象，你如果第一印象不能抓住投资者，你就失败了一半。
我们都知道策划书的最终目的是要说服投资者，那么在大纲范围内，有条不紊的呈现你的想法就是你必须要做到的事情。所以，当你开始写商业策划书的时候，你心里必须有大纲。
希望看官可以一行一行看完，这样的思维模式对创业是很有帮助的。
摘要
 一句话说明理念由来。（切入点）
 一句话说明市场的需要。（市场前景）
 一句话说明你们提供了什么需要。（产品）
 一句话说明还有谁提供了这些需要。（竞争对手）
 一句话说明你们提供的比他们提供的强在哪？（优势）
 一句话说明你们如何做出这个“强”。（研发）
 一句话说明你们如何把“强”弥补到“需要”那里去。（市场运作）
 一句话说明你们弥补的需要能赚多少。（盈利模式）
 一句话说明你们赚的分给我们多少，要我们提供什么。（回报）
 一句话介绍一下你们。（团队优势）
  如摘要的思维逻辑，正文就是在这样的思维框架下进行。
还没有注册公司的话则自行换为“团队”，再引用“公司”的思路自行编制策划书，而我给的这份思路文案里，有一部分是可以删除的。
正文要求：所有一句话能说完的，绝不两句话。
在第九章里提到的分股方式，可以参考我在这个几个朋友合伙创业，如何分配股权？问题下的答案，以数学模型建立起来的量化股权方案。
第一章 基本情况篇 公司叫什么。
公司在哪。
公司是什么性质。
公司股东有哪些。
控股结构是怎样。
公司主要业务是什么。
公司员工组成是怎样。
公司财务怎样。
公司近期目标和长期目标是什么。
第二章 公司管理 概述。
高层是哪些。</description>
    </item>
    
    <item>
      <title>微信客户端sql抓取</title>
      <link>https://blog.wellwell.work/w/post/2016-4-17-weixin-articles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2016-4-17-weixin-articles/</guid>
      <description>  微信抓取最稳定的方法是客户端抓取，但这也是最困难的抓取方法，这里提供一个抓取的思路。
 抓取背景  微信客户端（Android）的推送服务是长连接，但是并不能保证公众账号的文章能够及时或者优先被推送； 长连接的每次心跳推送会修改/data/data/con.tencent.mm/MicroMsg/{hash}/EnMicroMsg.db; 该db是使用sqlcipher开源工具加密，注意是db加密，并不是数据加密； db的加密密码是hash(IMEI+UIN)[:7]； IMEI即手机的串号，UIN为微信账号的内部ID，IMEI能直接在手机内读取，UIN能在手机内读取最后一次登录的账号的。  抓取思路 主要思路是读取EnMicroMsg.db这个数据库的内容， 公众账号的文章同样是在message表中， 据此便能在不影响微信的情况下，很顺利的拿到推送消息（不是内容）。
对于推送的及时性，思路可以是这样，监测这个EnMicroMsg.db文件， 如果在*分钟内没有修改，那就启动微信的主activity，等待一定时间后再销毁（或不销毁）。
启动方法：
am start -n com.tencent.mm/com.tencent.mm.UI.Launcher  研究进度 现在能够查看message表中内容，公众号的消息会在以下两个Field中区别于普通消息：
{ &amp;quot;content&amp;quot;: &amp;quot;~SEMI_XML~&amp;quot;, //暂时不确定这个是string还是data &amp;quot;bizClientMsgId&amp;quot;: &amp;quot;mmbizcluster_1_3077155302_405050727&amp;quot; }  其中bizClientMsgId是重点，因为在该数据库（其他的Index，Sns不是消息内容）并不能直接找到文章的url，abstrac等。 推测，url是由这个字段拼接而成。
 rconversation表同样有记录消息（摘要）。
 完整的url如下，
http://mp.weixin.qq.com/s?__biz=MzA3NzE1NTMwMg==&amp;amp;mid=2650660112&amp;amp;idx=1&amp;amp;sn=b041276dd158bf917b195b33ec9ef2c6  其中，
 __biz为公众号id的base64编码值，即上面示例的bizClientMsgId字段中的3077155302， mid暂时还没有找到， idx为bizClientMsgId字段中的1， sn应该是上面三个值某种算法的hash值，服务端根据这个值来做校验。  所遇问题  bizClientMsgId中的405050727还没有参与计算，同时url中的mid不知从何计算，从某种角度来说，这两个值应该是有关系的；
 暂时还没有校验参数sn的具体计算方法。
   目前还不清楚web端返回的是不是直接的url，如果不是可以在js上找到计算方法； 如果不行，只有反编译apk
 </description>
    </item>
    
    <item>
      <title>微博爬虫重构</title>
      <link>https://blog.wellwell.work/w/post/2016-03-21-rebuild-weibo_spider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2016-03-21-rebuild-weibo_spider/</guid>
      <description>新加入了一家公司，看了下现在自己所在的爬虫部门的业务架构与代码，自己感觉有些许地方不是那么合理，当然这只是自己的拙见，Show me the code and result。
谁都知道，在一台机器上能跑越多的蜘蛛越节约成本，尽量把一台机器给榨干一直是我们梦寐以求的事情。所以一个好的程序是达到同样的目的消耗越小越好。
OK，现部门的实现方式是通过在机器上跑浏览器来爬取数据，对没看错，是跑浏览器！跑浏览器！跑浏览器！ 对于这种实现方式，优点可能就是更拟人化（未必），可以人工监视（能看见才安全）；缺点显然，消耗太大，且不说机器上转一个桌面环境得额外消耗多少资源，单就一个Chrome消耗也不少。
那么，是不是有必要呢？我觉得这不是一个问题，这是一个答案：没必要！
我们来分析下，现在web版的微博，其实移动端或者客户端都比web端对爬取限制的宽松，因为只有web端被暴漏的可能性更大，所以web部门对限制爬虫下足了功夫。 这里还是就web端来看看。
这个版本的微博是有消息推送功能，当然是为推送消息，前端JS会隔段时间就向服务器请求数据，注意请求的不是timeline，可能服务端还真就对timeline这个接口的请求做了限制，这里请求的是remind，即为消息通知接口，地址如下，
http://rm.api.weibo.com/2/remind/push_count.json?trim_null=1&amp;amp;with_dm_group=0&amp;amp;with_settings=1&amp;amp;exclude_attitude=1&amp;amp;with_common_cmt=1&amp;amp;with_comment_attitude=1&amp;amp;with_common_attitude=1&amp;amp;with_moments=1&amp;amp;with_dm_unread=1&amp;amp;msgbox=true&amp;amp;with_page_group=1&amp;amp;with_chat_group=1&amp;amp;with_chat_group_notice=1&amp;amp;_pid=1&amp;amp;count=10&amp;amp;source=3818214747&amp;amp;status_type=0  返回数据如下，
{&amp;quot;remind_settings&amp;quot;:{&amp;quot;msgbox&amp;quot;:2},&amp;quot;status&amp;quot;:103,&amp;quot;app_message&amp;quot;:[]}  status即为未查看的微博数目
先不去分析它带的参数，就这个接口而言，web端本省就是每隔一定秒数就请求一次，至少说明这个接口的请求频率限制是没有那么高，甚至是没有限制，为了验证，我在console里面简单的做了个定时器，每隔2s请求一次，这样的请求频率应该能够满足基本所有的爬虫需求。
setInterval(function(){var xhr = new XMLHttpRequest();url=&amp;quot;http://rm.api.weibo.com/2/remind/push_count.json?trim_null=1&amp;amp;with_dm_group=0&amp;amp;with_settings=1&amp;amp;exclude_attitude=1&amp;amp;with_common_cmt=1&amp;amp;with_comment_attitude=1&amp;amp;with_common_attitude=1&amp;amp;with_moments=1&amp;amp;with_dm_unread=1&amp;amp;msgbox=true&amp;amp;with_page_group=1&amp;amp;with_chat_group=1&amp;amp;with_chat_group_notice=1&amp;amp;_pid=1&amp;amp;count=10&amp;amp;source=3818214747&amp;amp;status_type=0&amp;quot;;xhr.onreadystatechange = function(){if(xhr.readyState === 4){console.log(xhr.responseText)}};xhr.open(&#39;GET&#39;, url);xhr.send()}, 2000)  2016.03.21 21:06开始 2016.03.22 08:55查看依然成功请求 中间会有 503 (Service Unavailable)错误。
我们可以根据这个接口的返回数据来作为是否请求timeline的依据。我们消息的冗余数为2的话，那么应该就是在这个remind接口返回的消息条数的数据中，只要大于1就去请求timeline，而且是肯定有新数据的，但是这个数据应该是大于等于1的，因为有可能在请求玩remind接口后又有了新的数据。
客户端版本的微博api应该限制也是比较少的，timeline请求如下，
http://api.weibo.cn/2/statuses/friends_timeline?trim_level=1&amp;amp;networktype=WIFI&amp;amp;is_new_photo=1&amp;amp;uicode=10000001&amp;amp;picsize=480&amp;amp;featurecode=10000001&amp;amp;c=android&amp;amp;i=ec53948&amp;amp;s=0c4125e2&amp;amp;ua=IPhone6s__weibo__5.4.0__android__android6.0.2&amp;amp;wm=5311_4002&amp;amp;v_f=2&amp;amp;v_p=22&amp;amp;from=1054095010&amp;amp;gsid=_2A257LJU3DeTxGedJ71AZ8i7Lwj6IHXVWe6__rDV6PENPuNUMf1mVlDWpbhdwhoMNzYtHe9GyVgt4N0Zt&amp;amp;lang=en_US&amp;amp;trim=1&amp;amp;device_id=a2923eead53464c20279e9958eec5394277f7cc7&amp;amp;count=1&amp;amp;oldwm=2421_0226&amp;amp;trim_page_recom=0&amp;amp;fast_refresh=1  这里使用的是tcpdump进行抓包，经测试gsid为主要的身份认证标示。 客户端应该也是有remind接口，这里就可以使用整套的客户端API，基本流程也很简单，
移动端请求timeline
http://m.weibo.cn/index/feed?format=cards 默认是10个，所以最好在status接近10时再来请求 这里可以通过已经登录的sina.com.cn请求 http://login.sina.com.cn/sso/login.php?url=http%3A%2F%2Fm.weibo.cn%2Findex%2Ffeed%3Fformat%3Dcards&amp;amp;_rand=1458614093.3234&amp;amp;gateway=1&amp;amp;service=sinawap&amp;amp;entry=sinawap&amp;amp;useticket=1&amp;amp;returntype=META&amp;amp;_client_version=0.6.11 来拿到weibo.cn的登录cookie  轮询remind接口-&amp;gt;大于设定粒度-&amp;gt;请求timeline接口  关于客户端的认证标示获取，可以专门使用一台机器安装android模拟器，安装好微博客户端，再自动登录账号，用tcpdump等抓取网卡的数据包，取得该账号的认证标示。对于自动登录账号，可以使用自动输入账号密码，亦可以模拟登录请求。
如果这里可行的话，其他的模拟行为应该不成问题。
先按着这个思路来实现一个初级版本以供测试，应该一个文件就能搞定！</description>
    </item>
    
    <item>
      <title>本科毕业简历</title>
      <link>https://blog.wellwell.work/w/post/2014-3-4-%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2014-3-4-%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</guid>
      <description>重来都没有一项熟练的技能,永远都是这么轻浮.太阳升起的时候,小草就会很安静
个人技能  熟练使用 AltiumDesigner 进行双面电路板的设计 熟练使用Msp430系列单片机 熟练在Linux环境下进行交叉编译 英语水平 能快速阅读 Datasheet 以及各类技术文档 其它  熟悉HTML，CSS，JS网页技术 熟练使用Python脚本语言以及Django框架   求職意向  電子電路設計相關  Python 使用相關  Linux 運維 可培養職位   GO，JS開發 Android 開發 By Java IOS 開發 By Swift or OC   個人技能  硬件  熟悉使用 AltiumDesigner，KiCad 繪製電路  熟悉使用 MSP430 系列單片機  軟件  熟悉使用 Python 腳本語言   熟悉使用 Django 後臺開發  熟悉使用 HTML，MarkDown 標記語言  熟悉使用 jQuery 庫，以及 AngularJS   個人經歷  2013年創立手機維修工作室 2013年(第五屆)全國三維數字化創新設計大賽 安徽賽區 三等獎 2014年設計本安載波語音電話 2014年設計礦用LED屏電路 2014年發表論文“基於GPRS的遠程心電實時診斷系統” 《電子質量》期刊 總第327期 2014年(第七屆)全國大學生節能減排大賽 安徽賽區 三等獎  興趣愛好  熱愛開源 中國文化  國學 書法  Get新技能  電路設計與製作 學習新的知識  Golang，NodeJS, Swift, Rust Docker，Spark，Hadoop NLP, AI, DL, ML, DM Linux 移植  網絡安全   http://tinyurl.</description>
    </item>
    
    <item>
      <title>漫谈SOHO</title>
      <link>https://blog.wellwell.work/w/post/2014-5-28-talking-soho/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2014-5-28-talking-soho/</guid>
      <description>来自优设哥 编者按：前俩天刚聊到远程工作，今天让一个有多年SOHO经验的设计师@小宁就是cOoKiE 来聊聊他的心得感悟，好处大家听得不少，接下来以他自己为案例讲一些大家想得到的想不到的消极面，以及很多值得注意的地方，有心SOHO或接私单的同学，不妨来学习一下。
之前优设采访过国内的自由设计师：《自学成才！国内独立设计师专访之飞屋工作室》
首先要讲一下几个理念性的东西，我自己的理解，或许大家不赞同。不过赞不赞同另当别论，反正我这儿是得先说的。先说说我自己，两段SOHO经验，分别是12年刚毕业的时候，以及15年换工作间隙的时候。所以在这方面是有点经验的，然后最近，好吧，其实是两个多月以前有两个朋友问我关于SOHO的事儿，我就想写一篇文章来说明一下。PS：这只是我的个人经验，可以参考但不可以尽信。
在我看来SOHO必须是一个能自己在家里靠着自己掌握的能力或者技能赚钱养活自己的过程，我觉得这样才是SOHO。如果只是在家几个月不开斋然后嚷嚷着自己是在SOHO的那样应该叫做待业而不是SOHO…
似乎在大家工作压力越来越大的今天，很多人都想试一下这一种工作模式，因为相对于创业，它比较省钱；相对于打工，它比较自由。但是，万物总有对立面，SOHO好的一方面就是依靠自己的能力，为自己工作，会更有动力，而且时间自由，睡醒了再上班，或者直接等high完晚上回家有空了再做，反正在deadline之前搞定就行了。好处大家听得不少，接下来我想以我自己为案例讲一讲一些大家想得到的想不到的消极面。
SOHO的坏处大概有：你今天不工作你今天就没收入，休息日不稳定，收入不稳定，赶稿子赶方案也同样赶死人。
通常常见转职为SOHO人的职业有：平面设计师、自由撰稿人、翻译、音乐创作人、其他各种设计师（UI、工艺品、装帧……）
所以我想说的就是，如果想要SOHO，请先考量一下自己的专业能力或者是兴趣爱好，是否达到了那个可以转化为盈利的程度，我有个朋友算是剑走偏锋的，是个例而且不提倡，也别模仿。是这样的，他喜欢足球，他研究透彻每一支球队，甚至还认为球队之间是有渊源和派系等，他有他自己的理论分析，然后他买足彩，嗯，很厉害。这算是兴趣爱好盈利的一个个例，也是一个不恰当的例子。所以，专业能力是SOHO的前提，也是接单的基础，如果没有这个前提的，其实完全可以不用尝试SOHO，因为根本木有接单的可能性啊。
SOHO的时候其实自制力特别重要，每天都要限制自己在一定的时间内完成一定部分的工作，12年的时候我刚毕业SOHO，做的是笔译，有固定客户，每天都会和朋友约饭，当时是上午工作，下午看书，晚上约饭跑步，这样的日子，挺健康，但久了反而是坚持不下去了，有时候上午不想工作，下午也不想看书，于是就睡或者玩游戏。因为一旦SOHO，没有节假日没有双休没有上下班，一切的节日和时间上的概念都会被弱化。这个时候其实最需要的就是自制力和时间管理能力，还有个长期进修的计划和实施。
自制力得好，也得有自学的主动性以及一定程度的综合能力。其实还觉得综合能力蛮重要的，拿笔译来说，中译英和英译中不同价这个大家都知道，可是不同专业的翻译的价位，就是需要大家去了解，不能全部都是千字一百二这样的价格去做。拿设计来说，要知道对方要的是啥文件，直接发原文件还是JPG就行或者是要PDF，要用AI还是CDR还是PS来做，出血要预留多少，然后送厂印刷的时候色差大概有多大，要怎么调。这些都是属于前期就要了解好的知识。因为SOHO，你没有同事帮忙，你一个人要完成平时几个人完成的工作，但你的回报也是比平时丰厚，所以你需要承担的东西也就更多。
一般来说，要SOHO先得有工作经验，像我12年时候的笔译，就真的是纯靠机遇，刚好人家要人，能在家工作的，刚好我找到了，就这么简单。但我15年的SOHO，就是有工作经验和人脉之后才敢辞职出来SOHO的，因为我在电商行业也做了一段时间了，认识了一些朋友，他们会给我介绍单子，还有网友找我帮他们作图。所以其实是我自己有了客源之后我才SOHO的，不是一个不开心我就辞职了然后就说：“我要SOHO.”然后就在家里干等着，每天在Q群里面发：承接淘宝天猫京东阿里巴巴详情页，海报，关联页，主页，50元起。不是这样的，这样的人有梦想，但脚下的步子没有迈开。要SOHO的，最好得有一定的客户群体积累，这样会轻松很多。
那如果是没有客户但是有能力做SOHO呢？ 那就有几个途径了，先说一下，那个XX戒和其他的威客类的网站，其实存在蛮多都是骗稿的，这个大家注意一下，特别是撰稿人和设计师们。
他们骗稿不一定得骗你的成品，他们要的只是你的idea你的思路，说是说比稿，实则……我也试过豆瓣上面找，豆瓣需要自辩，很多假的，但真的也不少。（我不推荐任何小组，麻烦大家自己分辨）。我自己没有在论坛找过，但以前有网友说他的工作都是论坛找的，但现在论坛毕竟也大不如前了，所以这个有待参考吧。我的建议是如果有一定专业水准的话，其实也可以试试刷脸，但无论你是做什么行业的SOHO，都要有如果你刷脸让朋友给你找单子或者客户的话，以后你可能需要“回报”人家免费单子或者低价单子，所以正常来说我是不建议这样的，但是如果朋友有很好的资源的话，那我建议采用返点的形式来合作，这可能是一个相对比较合理也是比较好的方式。
客户的话，每个行业都有坑的客户，这个也不好怎么说，但对于初级SOHO人来说，遇到的客户大半都是想省钱的比较抠门的，所以了解市场价也是很有必要的，途径之一就是某宝的客服。至于之前我朋友也问过我是先款后开工还是先开工末了给人家稿子，这个嘛具体看客户，但是收30%-50%是必要的，免得到时人家骗稿或者你做好了人家说不要了那你就血本无归了，SOHO人的最大成本就是时间。此前我是收50%并且只发预览小图，高清图和源文件是等尾款结了再发。大家也许可以参考一下。
讲完这些之后我想讲讲SOHO带来的消极影响 首先是自由/孤独，孤独和自由这俩就是孪生兄弟，去到哪都不会落下另外一个。自由的工作环境自由的工作时间，大家挤公交时候你在睡觉，大家跑着赶打卡的时候你还在睡觉，大家刚坐下喘口气吃早餐的时候，你还在睡觉，你要是一高兴，可以睡到下午才起来工作，赶稿子的时候赶到半夜两三点，有可能周末还要加班。其实也没有所谓的加班，SOHO人哪里有上下班的概念呢？都是有活儿就干，时间被冲淡，节假日和双休似乎也总是被遗忘。
久而久之，孤独感会袭来将你包围，你会感觉到不是你遗忘了节假日和双休，而是世界把你遗忘了，或许我这样说有点夸张，不过别人上班最起码有同事可以说话，你是一个人在家工作，除了你自己，或许还有一只宠物，就是四面墙。所以我觉得可以长期坚持SOHO的人，势必是可以忍受孤独享受孤独的人。我有个朋友就是这样的，其他人都觉得他很孤独，他却很喜欢那种感觉，一人一猫，种花种草，看书写字，他自己说是“与世隔绝”，并且很享受当下的生活。
一旦开始SOHO，对自己的认识和未来的规划就会逐渐变得模糊。
人最难的就是认清自己，很多人觉得看不到未来，所以自我规划的能力是很重要的。先知道自己在一定时间内要达到怎么样的要求，然后制定计划开始实施。因为SOHO人很多本身就是做技术类的工作，所以也挺好做规划，毕竟对于一个技术人的水平，还是有个大众评判标准存在的。做技术的还是要参照一些国外的，毕竟国内的水平和大方向都是有一定限制的，如果有机会的话，多和大神们交流也不错，可以少走弯路，但还是那句话，不要尽信。多和外界交流，也可以一定程度上避免迷茫。我觉得面对面的交流，是行程表里面的必备部分。现在的IM再方便，也没法取代得了面对面的交流，面对面交流的意义很大，很多东西通过电话微信QQ等是没法讲得清的，但是面对面时候，可以碰撞出很多的火花。面对面交流不一定得那么正式，约咖啡厅喝咖啡，平时聚会，运动都是途径。
下面说说SOHO人的时间管理 明显我12年时候的时间管理要比15年的好。可能有些人会觉得自己自制力不够，有时候会刷围脖玩手机看看公众号什么的，所以就直接断网来工作。但是你在公司上班你就不玩手机了？我觉得类似这样的方法很消极，是得对自己多没有信心的人才会这样做？SOHO人的一大特点就是时间会被碎片化，因为你SOHO于是周围人可能觉得你很有空，所以你的时间计划会被打乱。
比如：今晚一起吃饭，你能不能先去等位？ 比如：最近我老婆不在家，我狗狗中午没人喂了，我又赶不回去，要不你中午帮我喂一下狗？ 诸如此类的琐事儿是非常多的，所以在SOHO的时候，要安排好自己的时间和规划好当天要做的事情，不是不能约饭也不是不能喂狗，重点在于你工作自己做完了么？玩够了之后再用碎片化时间工作，这样本末倒置就不对了。
所以通常拿到单子，我是这样做的。
第一步，评估这个项目需要的总时长
虽然在谈单的时候就已经是说了个大概的时间和deadline了，但通常那个都是给自己预留了多一点时间的，所以现在要评估的是准确的时间，这一步就决定了你有多少时间可以去等位和喂狗了。
第二步，分配好每天的工作量
你有可能今天要去接女友飞机，明天要去和朋友吃饭，那你就要先规划好时间了。除了每天的工作量要完成，最好还要预留时间学新的东西，也别忘了运动。SOHO人通常都会缺乏运动，但明明自己就是比别人有更多时间运动的人，最起码上下班时间你省下了，别人在路上耗着。
第三步，规划好当天做的家务或者其他事情的时间
因为在家待的时间多了，因而很多本来周末做的家务，就会变成两天做一次或者三天做一次，也因为自己买菜煮饭扫地拖地等，你的时间会被碎片化，我通常都是工作一个小时左右就休息一下，休息的时间就用来做家务。每天精力最好的时间要用来做提高自己的事情，有的人是夜猫子型的喜欢晚上看书看视频，有些人是晨鸟型人一大早起来看书看视频，这个就要看着自己的情况来了。工作时间不要硬性规定要多久，有时候客户需求改一下，那就不是微调这么简单了。
工作时间这一方面，不好说，但通常都是会在不知不觉当中比别人多工作一到两个小时吧。
第四步，规划充实自己的时间
这个是真得每天都要有规划，每天都得有所进步。
老实说我个人并不觉得大多数SOHO人可以一直SOHO下去，首先第一个，收入不稳定，除了你每天的血汗钱以外没有其他任何的福利。人家待公司的有带薪假期你有么？人家买了五险一金你有么？你给人家算成本的时候，你把交通费（见客户产生，如果没有见客户可以忽略），水电费，通讯（和客户打电话），办公用品，器材损耗你给算进去没有，有很多SOHO人都忽略了好吗？我自己曾经也是其中一员，各位多改几次需求多让你改几次稿子，其他客户的单子就耽搁了，你原本的报价就越来越没有赚头了，这个一开始就应该考虑好。
然后就是来自外界的一些“因为暂时不了解你们这个群体”所以产生的一些不公平对待。对于大多数人来说，出去玩的时候可能资产证明和流水就已经是一个问题，因为很多支付都是现金、支付宝、微信等方式啊，不一定是打银行卡的啊，再说了，不稳定。毕竟不是所有人都可以和张佳玮一样可以年入几十万现在在法国。所以我觉得很多人，都会在SOHO一定时间后重回职场。所以充实自己，是很重要的，你要计划好你一年的目标，然后量化到每个月再到每一天，每天睡觉前问问自己你做到了没有？顺便提一下，我自己的2015年目标，在8月份的时候就已经完成了。现在做的是额外的目标，其实这种感觉很好很享受，因为你会感觉你吹过的牛逼挖过的坑，现在被你用事实填上了。我的建议是：除了专业方面技能的加强（几乎是必修课级别），此外还应该加强一下商业方面的知识，因为谈单的时候会需要很多方面的综合知识，不仅仅是营销，还需要你对整个市场够了解，因为是自由职业你还得会理财，不然今天大鱼大肉明天喝西北风了，话术以及沟通能力，真的很重要，问不清楚你真的就白做了，最好是有案例或者大概的选项给客户选。
我的看法是如果不是抗压能力强的人，真不建议开始SOHO，因为你如果找一份工作做办公室的话，你只是找一份工作。但是如果是SOHO的话，你每天都在找工作，每天都在找单子，直到你有足够多的固定客户，一切才会趋于稳定，但这个时候你又会有迷思，究竟是找多几个人开一个工作室呢？还是提高自己水平换其他客户呢？这些问题就留给你们自己想吧。</description>
    </item>
    
    <item>
      <title>老马农学英语</title>
      <link>https://blog.wellwell.work/w/post/2014-5-21-the-way-to-learn-english-for-coders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2014-5-21-the-way-to-learn-english-for-coders/</guid>
      <description>这是伯乐在线上老马农发表的一片文章：老码农教你学英语，顺道来总结下！
英语学习是不可能速成的 对于软件行业，熟练掌握英语的概念大概是：
 阅读：能够直接阅读英文文档 写作：能够直接编写英文文档、邮件，达到英语母语人士能够无歧义理解的程度，追求逻辑严密和用词严谨 听说：能够顺畅地与英语母语人士进行有关技术方面的交流，达到双方沟通无歧义的程度，争取在对话中表现幽默感和个人品位  大概要这样做：
 遇到问题百度查中文文档改成Google查英文文档， 把写中文注释的习惯改成写英文注释，拼音变量名改成英文短语变量名， 平时没事听点外语歌，感受一下英语的韵律 有机会就经常去听一些国际性的行业大会 周末再去看看好莱坞原声版大片  一万小时理论 对于CET-4或者6级水平的同学（没错，4和6都是一个水平，几乎没啥差别），要达到上面提到的标准大概需要需要要1万小时以上。
1万个小时这个数据的估算方法是：阅读5000小时、听2000小时、 写2000小时、说1000小时。
具体说明：
 大量阅读是提高英语水平的基础、核心、重中之重，要在大量阅读的基础上再开始练习听力和写作； 写作要创造环境，每天都要写1000字以上； 听力要在阅读能力达到一定水平后再开始练习，和前面说的阅读给写作打基础的关系相似，练听力的同时其实就在为口语打基础； 练习口语是最麻烦的，因为说的条件最难创造，这必须得有个大活人认真地跟你聊才行啊！  积跬步  阅读，有把握蒙的就蒙，没把握的就查，查 英-英 词典，不求快要坚持。技术领域科普书籍，《The Mythical Man-Month》 和《Joel on Software》等；专业书籍，《数据结构》、《离散数学》、《操作系统》等原版教材；同时，关注最新技术，看文档，上Google，逛 StackOverflow，混 Quora，fork Github项目研究。 写作，StackOverflow，Quora上问问题，答问题；Google Plus，Medium等看文章写体会。 听力，TED，CNN，力荐，乔布斯等IT访谈，100遍以上，1~20可以蒙；听非清晰，模糊音。 口语，找活的练，找老外（英语），谈对象，口语一练好，一脚就踹掉  坚持，坚持，再坚持！ 只是起步痛苦，坚持，坚持，再坚持！就有糖吃！</description>
    </item>
    
    <item>
      <title>雪球爬虫分析</title>
      <link>https://blog.wellwell.work/w/post/2016-03-22-xueqiu-spider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2016-03-22-xueqiu-spider/</guid>
      <description>雪球平台无API接口，请求的数据均为渲染好的html数据。
账号注册需要手机验证，captcha可识度较低。
如果直接在这一步骤提取出数据可以使用BeautifulSoup库来简化操作，否则直接使用正则匹配出div中的a，形如/1287305957/66319002。域名为根域名，目前为xueqiu.com。
html = request.content HOST = &amp;quot;http://xueqiu.com&amp;quot; for div in html.body.div: uid = div[&#39;data-uid&#39;] did = div[&#39;data-id&#39;] # 该条数据的详情url detail_url = &amp;quot;{}/{}/{}&amp;quot;.format(HOST, uid, did) content = div.div[&#39;.status-bd&#39;][1].div[&#39;.status-content&#39;] detail_url = content[&#39;h4.status-title&amp;gt;a&#39;][&#39;href&#39;] detail_title = content[&#39;h4.status-title&amp;gt;a&#39;].text detail_content = content[&#39;div.detail&#39;].div[&#39;.text&#39;].html  未阅读消息接口
http://xueqiu.com/remind/unread.json?_=1458614506219  timeline接口
http://xueqiu.com/service/partials/home/timeline?since_id=66029490&amp;amp;source=  登录接口
http://xueqiu.com/user/login POST username: areacode:86 telephone:15655400686 remember_me:1 password:028EA4876663F4D15EB5F3437101773B 其中password 为密码32位md5大写  所有接口无cookie会返回
{&amp;quot;error_description&amp;quot;:&amp;quot;遇到错误，请刷新页面或者重新登录帐号后再试&amp;quot;,&amp;quot;error_uri&amp;quot;:&amp;quot;/stock/search.json&amp;quot;,&amp;quot;error_code&amp;quot;:&amp;quot;400016&amp;quot;}  请求这个接口会设置以下cookie值，可请求其他接口
https://xueqiu.com/service/csrf?api=%2Fuser%2Flogin
Set-Cookie:s=23y213nb96; domain=.xueqiu.com; path=/; expires=Fri, 14 Apr 2017 11:29:00 GMT; httpOnly Set-Cookie:xq_is_login=; domain=xueqiu.</description>
    </item>
    
    <item>
      <title>雪球爬虫设计</title>
      <link>https://blog.wellwell.work/w/post/2016-3-23-arch-design-for-xueqiu-spider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wellwell.work/w/post/2016-3-23-arch-design-for-xueqiu-spider/</guid>
      <description>主要说明下整个爬虫代码的逻辑与处理流程。
功能分析 代码结构 按功能模块划分，
 vendors-外部库 modules-主要模块 tools-工具函数 main.py-主程序入口  主要逻辑  初步假设每个循环功能模块在独立的线程中。
 分为以下几个部分，
 交互console 轮询是否有新消息 请求timeline 解析html数据 保存爬取的数据 获取代理 获取账号 更新账号关注 远程指令，参数获取 日志输出  1.交互console 由DEAMON参数决定是否启动，如果不启动console程序将在后台运行。 主要完成命令的输入和运行状态的输出。
2.轮询是否有新消息 通过下面的接口GET请求，
http://xueqiu.com/remind/unread.json?_=1458614506219  返回的数据如下，
{&amp;quot;status&amp;quot;:0,&amp;quot;followers&amp;quot;:0,&amp;quot;dm&amp;quot;:0,&amp;quot;comments&amp;quot;:0,&amp;quot;mentions&amp;quot;:0,&amp;quot;notices&amp;quot;:0,&amp;quot;events&amp;quot;:0,&amp;quot;contact_friends&amp;quot;:0,&amp;quot;weibo_friends&amp;quot;:0,&amp;quot;events_id&amp;quot;:[],&amp;quot;ptl_status&amp;quot;:0,&amp;quot;ptl_last_modified&amp;quot;:0}  账号需要重新登录会返回如下数据，
{&amp;quot;error_description&amp;quot;:&amp;quot;遇到错误，请刷新页面或者重新登录帐号后再试&amp;quot;,&amp;quot;error_uri&amp;quot;:&amp;quot;/remind/unread.json&amp;quot;,&amp;quot;error_code&amp;quot;:&amp;quot;400016&amp;quot;}  所以可以在这里检测账号的状态。
其中status段就是未阅读的消息数目。
参数frequency接受1~1000的整数，是轮询的频率，单位是秒；理论上这个数值越高，账号越安全，不宜过大，防止一次爬取不及时和单次数据太多。 在雪球自己的web端这个参数大概是小于10s。
如果该部分的结果返回大于0，即有新的动态需要抓取。
 抓取步骤应该在这一步来完成，因为timeline请求是得到最新的消息，这两步应该是阻塞运行。
 3.请求timeline 如果frequency合适，一次请求能够完成需求。 请求成功，把数据丢给解析模块；请求失败，抛出错误信息。
4.解析html数据 读取队列的数据，进行解析操作，把解析完成的数据丢给存储模块。
 注意，一定要在程序关闭前，把queue中的数据保存到磁盘上，防止程序意外关闭时queue的数据丢失。 程序启动时从本地备份区，读取恢复。
 可以把解析规则，用参数传入。
5.保存爬取的数据 读取队列数据，
 注意，一定要在程序关闭前，把queue中的数据保存到磁盘上，防止程序意外关闭时queue的数据丢失。 程序启动时从本地备份区，读取恢复。
 6.获取代理 先拿到账号，再拿回一个可用代理，如果无代理返回，抛出无代理错误。 传入的参数为lastip，返回lastip；如果，而且allowlike为 0，则无论这个代理是否在使用都返回该ip；否则抛出。
判断逻辑， 如果allowmax参数为num，从代理库选出所有可用且已经代理了num-1个账号的代理，如果lastip在其中，则返回lastip；如果lastip不在其中且allowlike为0，抛出代理可用错误；如果lastip不在其中且allowlike为1，返回相近的ip，未找到则报错； 如果allowmax参数为1，从代理库选出所有可用且未被占用代理，如果lastip在其中，而且返回lastip；如果lastip不在其中且allowlike为0，抛出代理可用错误；如果lastip不在其中且allowlike为1，返回相近的ip，未找到则报错。</description>
    </item>
    
  </channel>
</rss>